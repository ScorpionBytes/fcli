package com.fortify.cli.common.output.cli.mixin;

import com.fortify.cli.common.output.cli.cmd.unirest.AbstractUnirestOutputCommand;
import com.fortify.cli.common.output.cli.mixin.spi.unirest.AbstractUnirestOutputHelper;
import com.fortify.cli.common.output.cli.mixin.spi.unirest.IUnirestOutputHelper;
import com.fortify.cli.common.output.cli.mixin.writer.OutputWriterWithQueryFactoryMixin;
import com.fortify.cli.common.output.cli.mixin.writer.StandardOutputWriterFactoryMixin;
import com.fortify.cli.common.output.spi.product.ProductHelperClass;
import com.fortify.cli.common.output.writer.output.standard.StandardOutputConfig;

import lombok.Getter;
import lombok.Setter;
import picocli.CommandLine.Command;
import picocli.CommandLine.Mixin;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.Spec;
import picocli.CommandLine.Spec.Target;

/**
 * <p>This class provides standard, product-agnostic {@link IUnirestOutputHelper} implementations.
 * Each product module should provide a {@code <Product>OutputHelperMixins} class that has
 * a {@link ProductHelperClass} annotation for providing product-specific functionality, and 
 * provides similarly named inner classes that extend from the corresponding 
 * {@link UnirestOutputHelperMixins} inner class. For example:</p>
 * 
 * <pre>
 * 
 * @ProductHelperClass(MyProductHelper.class)
 * public class MyProductOutputHelperMixins {
 *     @ReflectiveAccess
 *     public static class SCDastProductHelper implements IProductHelper, ... {
 *         @Getter @Setter private IUnirestOutputHelper outputHelper;
 *         ...
 *     }
 *     
 *      public static class Create 
 *         extends UnirestOutputHelperMixins.Create {}
 *     
 *     ...
 * }
 * </pre>
 * 
 * <p>Each product-specific {@link Command} implementation can then use the appropriate 
 * product-specific {@link IUnirestOutputHelper} implementation through the {@link Mixin} 
 * annotation, i.e.:</p>
 * 
 * <pre>
 * &#64;ReflectiveAccess
 * &#64;Command(name = MyProductOutputHelperMixins.List.CMD_NAME)
 * public class SomeListCommand extends AbstractMyProductOutputCommand implements IBaseHttpRequestSupplier {
 *     &#64;Getter &#64;Mixin private MyProductOutputHelperMixins.List outputHelper;
 *     ...
 * }
 * </pre>
 * 
 * <p>Here, {@code AbstractMyProductOutputCommand} would extend from {@link AbstractUnirestOutputCommand},
 * which takes care of displaying the output generated by the command, based on the configured
 * {@link IUnirestOutputHelper} {@link Mixin}.</p>
 * 
 * <p>For consistency, command implementations should use the {@link IUnirestOutputHelper} implementation
 * that exactly matches the command. For example, you should only be using the {@link List}
 * implementation if you are actually implementing a 'list' command; {@link List} shouldn't be used
 * by commands that just generate some list of output but are not actually called 'list'. In other
 * words, the command name should match the {@code CMD_NAME} provided by the {@link IUnirestOutputHelper}
 * implementation (and you should always use that constant to define the {@link Command} name.</p>
 * 
 * If there is no matching standard {@link IUnirestOutputHelper} mixin class, the 
 * {@code MyProductOutputHelperMixins} class can define additional, product-specific
 * {@link IUnirestOutputHelper} mixins that extend from one of the following generic 
 * mixins:
 * <ul>
 * <li>{@link Other}, not providing any standard output format or output writer factory; subclass should provide {@code CMD_NAME} constant, and outputWriterFactory and basicOutputConfig fields with Getter annotations</li>
 * <li>{@link TableWithQuery}, providing query options and default table output format; subclass should provide {@code CMD_NAME} constant</li>
 * <li>{@link TableNoQuery}, providing no query options and default table output format; subclass should provide {@code CMD_NAME} constant</li>
 * </ul>
 * 
 * All standard output helper mixins defined in this class are based on {@code TableNoQuery}, except
 * for the {@code List} class which is based on {@code TableWithQuery}.
 *    
 * @author rsenden
 */
public class UnirestOutputHelperMixins {
     @Command
    public static class Other extends AbstractUnirestOutputHelper {
        @Getter @Setter(onMethod=@__({@Spec(Target.MIXEE)})) private CommandSpec mixee;
    }
    
    
    public static class TableWithQuery extends Other {
        @Getter @Mixin private OutputWriterWithQueryFactoryMixin outputWriterFactory;
        @Getter private StandardOutputConfig basicOutputConfig = StandardOutputConfig.table(); 
    }
    
    
    public static class TableNoQuery extends Other {
        @Getter @Mixin private StandardOutputWriterFactoryMixin outputWriterFactory;
        @Getter private StandardOutputConfig basicOutputConfig = StandardOutputConfig.table(); 
    }
    
    
    public static class Add extends TableNoQuery {
        public static final String CMD_NAME = "add";
    }
    
    
    public static class Create extends TableNoQuery {
        public static final String CMD_NAME = "create";
    }
    
     @Command(aliases = {"rm"})
    public static class Delete extends TableNoQuery {
        public static final String CMD_NAME = "delete";
    }
    
     @Command(aliases = {"clear"})
    public static class DeleteAll extends TableNoQuery {
        public static final String CMD_NAME = "delete-all";
    }
    
     @Command(name = "list", aliases = {"ls"})
    public static class List extends TableWithQuery {
        public static final String CMD_NAME = "list";
    }
    
    
    public static class Get extends TableNoQuery {
        public static final String CMD_NAME = "get";
    }
    
    
    public static class Set extends TableNoQuery {
        public static final String CMD_NAME = "set";
   }
    
    
    public static class Update extends TableNoQuery {
        public static final String CMD_NAME = "update";
    }
    
    
    public static class Enable extends TableNoQuery {
        public static final String CMD_NAME = "enable";
    }
    
    
    public static class Disable extends TableNoQuery {
        public static final String CMD_NAME = "disable";
    }
    
    
    public static class Start extends TableNoQuery {
        public static final String CMD_NAME = "start";
    }
    
    
    public static class Pause extends TableNoQuery {
        public static final String CMD_NAME = "pause";
    }
    
    
    public static class Resume extends TableNoQuery {
        public static final String CMD_NAME = "resume";
    }
    
    
    public static class Cancel extends TableNoQuery {
        public static final String CMD_NAME = "cancel";
    }

    
    public static class Upload extends TableNoQuery {
        public static final String CMD_NAME = "upload";
    }
    
    
    public static class Download extends TableNoQuery {
        public static final String CMD_NAME = "download";
    }
    
    
    public static class Install extends TableNoQuery {
        public static final String CMD_NAME = "install";
    }
    
    
    public static class Uninstall extends TableNoQuery {
        public static final String CMD_NAME = "uninstall";
    }

    
    public static class Import extends TableNoQuery {
        public static final String CMD_NAME = "import";
    }

    
    public static class Export extends TableNoQuery {
        public static final String CMD_NAME = "export";
    }

    
    public static class Setup extends TableNoQuery {
        public static final String CMD_NAME = "setup";
    }
}
